- name: Ensure ./zero-agent.sh is executable
  file:
    path: "{{ agent_installer_stage_dir }}/zero-agent.sh"
    mode: "u+x,g+x,a+x"
    state: file

- name: Install appdynamics agent_installer
  become_user: "{{ agent_installer_user }}"
  become: True
  environment: 
    APPDYNAMICS_ACCOUNT_ACCESS_KEY: "{{ agent_installer_access_key }}"
  shell: 
    chdir: "{{ agent_installer_stage_dir }}"
    creates: "{{ agent_installer_dir }}/bin/zeroagent"
    cmd: >
      ./zero-agent.sh
      install
      --log-level '{{ agent_installer_log_level }}'
      --application '{{ agent_installer_application_name }}' 
      --account '{{ agent_installer_account_name }}'
      --access-key ${APPDYNAMICS_ACCOUNT_ACCESS_KEY}
      --service-url '{{ agent_installer_controller_url }}'
      --install-path '{{ agent_installer_install_path }}'
      {% if agent_installer_user == 'root' %}--systemd='{{ agent_installer_enable_systemd | bool | lower }}'{% endif%}
      {% if agent_installer_enable_proxy %}--proxy-url 'http:://{{ agent_installer_proxy_host }}:{{ agent_installer_proxy_port }}'{% endif %}
  register: agent_installer_install_output

- name: Print install output
  debug:
    var: agent_installer_install_output.stdout

- name: Validate agent installation
  wait_for:
    path: "{{ item }}"
  loop:
    - "{{ agent_installer_install_path }}/updater.lck"
    - "{{ agent_installer_install_path }}/watchdog.lck"
    - "{{ agent_installer_install_path }}/configs/cfg.lck"
  when: >
    agent_installer_validate_install and
    agent_installer_user == 'root' and
    agent_installer_enable_systemd

- name: Check agent logs
  wait_for:
    path: "{{ item.path }}"
    search_regex: "{{ item.search_regex }}"
    delay: 1
  loop:
    - search_regex: "Successfully reported instrumentation states"
      path: "{{ agent_installer_install_path }}/logs/agent.log"
  when: >
    agent_installer_validate_install and
    agent_installer_user == 'root' and
    agent_installer_enable_systemd and
    agent_installer_log_level in ('info', 'debug', 'trace')
